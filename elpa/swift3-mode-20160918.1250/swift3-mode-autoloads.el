;;; swift3-mode-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from swift3-mode.el

(let ((loads (get 'swift3 'custom-loads))) (if (member '"swift3-mode" loads) nil (put 'swift3 'custom-loads (cons '"swift3-mode" loads)) (put 'languages 'custom-loads (cons 'swift3 (get 'languages 'custom-loads)))))
(autoload 'swift3-mode "swift3-mode" "\
Major mode for editing Swift code.

\\{swift3-mode-map}

(fn)" t)
 (add-to-list 'auto-mode-alist '("\\.swift\\'" . swift3-mode))
(register-definition-prefixes "swift3-mode" '("swift3-mode"))


;;; Generated autoloads from swift3-mode-beginning-of-defun.el

(register-definition-prefixes "swift3-mode-beginning-of-defun" '("swift3-mode:"))


;;; Generated autoloads from swift3-mode-font-lock.el

(register-definition-prefixes "swift3-mode-font-lock" '("swift3-mode:f"))


;;; Generated autoloads from swift3-mode-indent.el

(defvar swift3-mode:basic-offset 4 "\
Amount of indentation for block contents.")
(custom-autoload 'swift3-mode:basic-offset "swift3-mode-indent" t)
(put 'swift3-mode:basic-offset 'safe-local-variable 'integerp)
(defvar swift3-mode:parenthesized-expression-offset 2 "\
Amount of indentation inside parentheses and square brackets.")
(custom-autoload 'swift3-mode:parenthesized-expression-offset "swift3-mode-indent" t)
(put 'swift3-mode:parenthesized-expression-offset 'safe-local-variable 'integerp)
(defvar swift3-mode:multiline-statement-offset 2 "\
Amount of indentation for continuations of expressions.")
(custom-autoload 'swift3-mode:multiline-statement-offset "swift3-mode-indent" t)
(put 'swift3-mode:multiline-statement-offset 'safe-local-variable 'integerp)
(defvar swift3-mode:switch-case-offset 0 "\
Amount of indentation for case labels in switch statements.")
(custom-autoload 'swift3-mode:switch-case-offset "swift3-mode-indent" t)
(put 'swift3-mode:switch-case-offset 'safe-local-variable 'integerp)
(defvar swift3-mode:insert-space-after-asterisk-in-comment t "\
Automatically insert a space after asterisk in comment if non-nil.")
(custom-autoload 'swift3-mode:insert-space-after-asterisk-in-comment "swift3-mode-indent" t)
(put 'swift3-mode:insert-space-after-asterisk-in-comment 'safe-local-variable 'booleanp)
(defvar swift3-mode:auto-close-multiline-comment t "\
If non-nil, `indent-new-comment-line' automatically close multiline comment.")
(custom-autoload 'swift3-mode:auto-close-multiline-comment "swift3-mode-indent" t)
(put 'swift3-mode:auto-close-multiline-comment 'safe-local-variable 'booleanp)
(defvar swift3-mode:fix-comment-close t "\
Fix \"* /\" in incomplete multiline comment to \"*/\" if non-nil.")
(custom-autoload 'swift3-mode:fix-comment-close "swift3-mode-indent" t)
(put 'swift3-mode:fix-comment-close 'safe-local-variable 'booleanp)
(register-definition-prefixes "swift3-mode-indent" '("siwft-mode:tokens-not-in-generic-parameter-list" "swift3-mode:"))


;;; Generated autoloads from swift3-mode-lexer.el

(register-definition-prefixes "swift3-mode-lexer" '("swift3-mode:"))


;;; Generated autoloads from swift3-mode-repl.el

(autoload 'swift3-mode:run-repl "swift3-mode-repl" "\
Run a Swift REPL process.
It input and output via buffer `*CMD*' where CMD is replaced with the CMD given.
If there is a process already running in `*CMD*', switch to that buffer.
With argument CMD allows you to edit the command line (default is value
of `swift3-mode:repl-executable').  This function updates the buffer local
variable `swift3-mode:repl-executable' with the given CMD, so it will be used
as the default value for the next invocatoin in the current buffer.
With DONT-SWITCH cursor will stay in current buffer.
Runs the hook `swift3-repl-mode-hook' (after the `comint-mode-hook' is run).
(Type \\[describe-mode] in the process buffer for a list of commands.)

(fn CMD &optional DONT-SWITCH)" t)
(defalias 'run-swift 'swift3-mode:run-repl)
(autoload 'swift3-mode:send-region "swift3-mode-repl" "\
Send the current region to the inferior swift process.
START and END define region within current buffer

(fn START END)" t)
(autoload 'swift3-mode:send-buffer "swift3-mode-repl" "\
Send the buffer to the Swift REPL process." t)
(register-definition-prefixes "swift3-mode-repl" '("swift3-"))

;;; End of scraped data

(provide 'swift3-mode-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; swift3-mode-autoloads.el ends here
